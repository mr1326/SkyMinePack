name: Create Release with Version Tag

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the `main` branch.

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Extract Version from pack.mcmeta
      id: extract_version
      run: |
        description=$(cat pack.mcmeta)
        version=$(echo "$description" | grep -oP 'V \d+\.\d+\.\d+' | awk '{print $2}')
        if [ -z "$version" ]; then
          echo "Error: Version could not be extracted from pack.mcmeta."
          exit 1
        fi
        echo "VERSION=$version" >> $GITHUB_ENV
        echo "::set-output name=version::$version"
    - name: Set Up Git
      run: |
        git config --global user.name "your-username"
        git config --global user.email "your-email@example.com"
    - name: Create and Push Git Tag
      run: |
        git tag v${{ steps.extract_version.outputs.version }}
        git push origin v${{ steps.extract_version.outputs.version }}
    - name: Archive Release with Exclusions
      uses: thedoctor0/zip-release@master
      with:
        filename: 'release-v${{ steps.extract_version.outputs.version }}.zip'  # Creating a versioned ZIP file
        exclusions: '*.git* /*node_modules/* .editorconfig'  # Excluding unwanted files/folders

    - name: Create GitHub Release using Octokit
      id: create_release
      run: |
        VERSION=${{ steps.extract_version.outputs.version }}
        TAG_NAME="v$VERSION"
        RELEASE_NAME="Release v$VERSION"
        BODY="Automated release for version v$VERSION"
        # Create a GitHub release using the Octokit REST API
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d "{
                \"tag_name\": \"$TAG_NAME\",
                \"release_name\": \"$RELEASE_NAME\",
                \"body\": \"$BODY\",
                \"draft\": false,
                \"prerelease\": false
              }" \
          https://api.github.com/repos/${{ github.repository }}/releases
    - name: Upload ZIP to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-v${{ steps.extract_version.outputs.version }}.zip
        asset_name: release-v${{ steps.extract_version.outputs.version }}.zip
        asset_content_type: application/zip