name: Create Release with Static ZIP and Versioned Name

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Extract Version from pack.mcmeta
      id: extract_version
      run: |
        if [ ! -f pack.mcmeta ]; then
          echo "Error: pack.mcmeta file not found."
          exit 1
        fi
        description=$(cat pack.mcmeta)
        version=$(echo "$description" | grep -oP 'V ?\d+\.\d+\.\d+' | awk '{print $NF}')
        if [ -z "$version" ]; then
          echo "Error: Version could not be extracted from pack.mcmeta."
          exit 1
        fi
        echo "VERSION=$version" >> $GITHUB_ENV

    - name: Archive Assets Directly into ZIP
      run: |
        # Ensure that only the files are added to the ZIP, not the containing folder
        mkdir temp_assets
        cp -r !(temp_assets|.git|node_modules|.editorconfig) temp_assets/
        cd temp_assets
        zip -r ../SkyMinePack-$VERSION.zip ./*
        cd ..
        rm -rf temp_assets

    - name: Generate SHA-1 Hash for the ZIP
      id: generate_sha1
      run: |
        SHA1=$(sha1sum "SkyMinePack-$VERSION.zip" | awk '{print $1}')
        echo "SHA1=$SHA1" >> $GITHUB_ENV

    - name: Create GitHub Release
      id: create_release
      run: |
        RELEASE_NAME="v$VERSION"
        BODY="Automated release for version v$VERSION\n\nSHA-1 Hash:\n$SHA1"

        response=$(curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d "{
                \"tag_name\": \"v$VERSION\",
                \"release_name\": \"$RELEASE_NAME\",
                \"body\": \"$BODY\",
                \"draft\": false,
                \"prerelease\": false
              }" \
          https://api.github.com/repos/${{ github.repository }}/releases)

        if [ "$(echo "$response" | jq -r '.id')" == "null" ]; then
          echo "Error: Failed to create GitHub release."
          echo "$response"
          exit 1
        fi

        upload_url=$(echo "$response" | jq -r '.upload_url' | sed 's/{?name,label}//')
        echo "UPLOAD_URL=$upload_url" >> $GITHUB_ENV

    - name: Upload SkyMinePack ZIP to GitHub Release
      uses: actions/upload-release-asset@v1.0.1
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: "SkyMinePack-$VERSION.zip"
        asset_name: "SkyMinePack-$VERSION.zip"
        asset_content_type: application/zip
